In this implementation, the Block class represents a single block in the chain. Each block contains an index, timestamp, data, previous hash, and a nonce. The calculate_hash method is used to calculate the SHA-256 hash of the block data, including the nonce. The mine_block method is used to perform proof-of-work by finding a hash that meets the current difficulty target.
The Blockchain class represents the entire chain. It starts with a genesis block and has a difficulty property that determines the number of leading zeroes required for a block hash to be considered valid. The add_block method is used to add a new block to the chain, which first sets the previous_hash property to the hash of the previous block, then performs proof-of-work by calling the mine_block method. The is_chain_valid method is used to check the integrity of the chain by verifying that each block's hash matches its calculated hash and that each block's previous hash matches the hash of the previous block.
In this example, we create a blockchain with a difficulty of 3, then add three blocks with sample data. Finally, we check the validity of the chain using the is_chain_valid method.
